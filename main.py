import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile
from dotenv import load_dotenv

from instagram import download_instagram_content
from tiktok import download_tiktok
from youtube import download_video

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
DOWNLOAD_DIR = "downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
def escape_markdown(text: str) -> str:
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
@dp.message(lambda message: message.text)
async def handle_message(message: Message):
    url = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = (
        f"\U0001F464 *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n"
        f"üîπ *ID:* {message.from_user.id}\n"
        f"üîπ *Username:* @{message.from_user.username if message.from_user.username else '–ù–µ—Ç'}\n"
        f"üîπ *–ò–º—è:* {message.from_user.first_name}\n"
        f"üîπ *–Ø–∑—ã–∫:* {message.from_user.language_code}\n"
        f"üîπ *–°—Å—ã–ª–∫–∞:* {url}"
    )
    user_info = escape_markdown(user_info)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, user_info, parse_mode="MarkdownV2")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    if "instagram.com" in url:
        await message.answer("üì• –°–∫–∞—á–∏–≤–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram...")
        file_path = download_instagram_content(url)
        if file_path:
            if file_path.endswith(".jpg"):
                await message.answer_photo(FSInputFile(file_path), caption="‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ Instagram")
            elif file_path.endswith(".mp4"):
                await message.answer_video(FSInputFile(file_path), caption="‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ Instagram")
            os.remove(file_path)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram.")


    elif "tiktok.com" in url:
        await message.answer("üé• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏–∑ TikTok —á–µ—Ä–µ–∑ SnapTik...")
        file_path = download_tiktok(url)
        if file_path:
            await message.answer_video(FSInputFile(file_path), caption="‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ TikTok")
            os.remove(file_path)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ TikTok-–≤–∏–¥–µ–æ.")


    elif "youtube.com" in url or "youtu.be" in url:
        await message.answer("üîÑ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        try:
            file_path, title = download_video(url)
            title = escape_markdown(title)
            await message.answer_video(FSInputFile(file_path), caption=f"üé¨ *{title}*", parse_mode="MarkdownV2")
            os.remove(file_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")

    else:
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!", parse_mode="MarkdownV2")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    dp.message.register(handle_message)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())